from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from .models import ChatMessage
from .serializers import ChatMessageSerializer
import requests

class ChatAPIView(APIView):
    def post(self, request):
        user_message = request.data.get('message', '')
        if not user_message:
            return Response({'error': 'Message is required'}, status=status.HTTP_400_BAD_REQUEST)

        # Replace 'YOUR_API_KEY' with your OpenAI API key
        api_key = 'YOUR_API_KEY'
        headers = {'Authorization': f'Bearer {api_key}'}
        data = {
            "model": "gpt-3.5-turbo",
            "messages": [{"role": "user", "content": user_message}],
            "max_tokens": 50
        }

        # Call OpenAI API (or another AI model)
        response = requests.post('https://api.openai.com/v1/chat/completions', headers=headers, json=data)
        ai_response = response.json().get('choices', [])[0].get('message', {}).get('content', '')

        # Save the chat message
        chat_message = ChatMessage.objects.create(user_message=user_message, ai_response=ai_response)
        serializer = ChatMessageSerializer(chat_message)

        return Response(serializer.data, status=status.HTTP_201_CREATED)
